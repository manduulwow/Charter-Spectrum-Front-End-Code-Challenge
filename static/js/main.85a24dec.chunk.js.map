{"version":3,"sources":["Table_Restaurant/RestaurantMoreInfo/main.tsx","Table_Restaurant/Select/select.tsx","Table_Restaurant/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RestaurantMoreInfo","showInfo","restaurantInfo","setShowInfo","onClose","className","onClick","name","address1","city","attire","hours","telephone","href","website","style","border","Select","values","func","resetPage","onChange","e","currentTarget","value","marginRight","map","TableRestaurant","restaurants","setRestaurants","reset","useState","stateFilter","setStateFilter","genreFilter","setGenreFilter","searchValue","setSearchValue","currentPage","setCurrentPage","setRestaurantInfo","Math","floor","length","pages","setPages","restaurantsInfo","genres","forEach","restaurant","restaurant_genre","genre","split","Array","from","Set","sort","a","b","StateSelect","GenreSelect","onSearch","filter","indexOf","state","find","useEffect","type","placeholder","onKeyPress","key","slice","index","onRestaurantClick","id","fill","Number","_","i","App","fetchCall","fetch","headers","Authorization","then","res","json","catch","err","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85a24dec.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './main.css';\r\n\r\ntype TableRestaurantProps = {\r\n    showInfo: boolean,\r\n    restaurantInfo: {\r\n        name: string,\r\n        address1: string,\r\n        attire: string,\r\n        hours: string,\r\n        telephone: string,\r\n        website: string,\r\n        city: string\r\n    },\r\n    setShowInfo: Function\r\n}\r\n\r\nconst RestaurantMoreInfo = ({ showInfo, restaurantInfo, setShowInfo }: TableRestaurantProps) => {\r\n    const onClose = () => {\r\n        setShowInfo(false);\r\n    }\r\n    return (\r\n        (showInfo) ?\r\n            <div className=\"res-more-container\" >\r\n                <div className=\"res-more-curtain\" onClick={onClose}></div>\r\n                <div className=\"res-more-box\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>Name</td>\r\n                                <td>{restaurantInfo.name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Address</td>\r\n                                <td>{restaurantInfo.address1}, {restaurantInfo.city}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Attire</td>\r\n                                <td>{restaurantInfo.attire}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Hours</td>\r\n                                <td>{restaurantInfo.hours}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Telephone</td>\r\n                                <td>{restaurantInfo.telephone}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Website</td>\r\n                                <td><a href={restaurantInfo.website}>{restaurantInfo.website}</a></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ border: 'none' }}><button onClick={onClose}>Close</button></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div > : <Fragment></Fragment>\r\n    )\r\n}\r\n\r\nexport default RestaurantMoreInfo;","import React, { ChangeEvent } from 'react';\r\n\r\ntype SelectProps = {\r\n    values: string[],\r\n    func: Function,\r\n    resetPage: Function\r\n}\r\n\r\nconst Select = ({ values, func, resetPage }: SelectProps) => {\r\n    const onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        func(e.currentTarget.value);\r\n        resetPage(0);\r\n    }\r\n\r\n    return <select onChange={onChange} style={{marginRight: 10}}>\r\n        <option>All</option>\r\n        {\r\n            values.map(value => <option key={value} value={value}>{value}</option>)\r\n        }\r\n    </select>\r\n}\r\n\r\nexport default Select;","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport RestaurantMoreInfo from './RestaurantMoreInfo/main';\r\nimport Select from './Select/select';\r\nimport './main.css';\r\n\r\ninterface Restaurants {\r\n    address1: string,\r\n    attire: string,\r\n    city: string,\r\n    genre: string,\r\n    hours: string,\r\n    id: string,\r\n    lat: number,\r\n    long: number,\r\n    name: string,\r\n    state: string,\r\n    tags: string,\r\n    telephone: string,\r\n    website: string,\r\n    zip: number\r\n}\r\n\r\ntype TableRestaurantProps = {\r\n    restaurants: Restaurants[],\r\n    setRestaurants: Function,\r\n    reset: Function\r\n}\r\n\r\nconst TableRestaurant = ({ restaurants, setRestaurants, reset }: TableRestaurantProps) => {\r\n    const [stateFilter, setStateFilter] = useState('All');\r\n    const [genreFilter, setGenreFilter] = useState('All');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [showInfo, setShowInfo] = useState(false);\r\n    const [restaurantInfo, setRestaurantInfo] = useState({\r\n        name: '',\r\n        address1: '',\r\n        attire: '',\r\n        hours: '',\r\n        telephone: '',\r\n        website: '',\r\n        city: ''\r\n    });\r\n    const [pages, setPages] = useState(Math.floor(restaurants.length / 10) + ((restaurants.length % 10 > 1) ? 1 : 0));\r\n    let restaurantsInfo: Restaurants[] = restaurants;\r\n\r\n    const states = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY']\r\n    let genres: string[] = [];\r\n    restaurantsInfo.forEach(restaurant => {\r\n        const restaurant_genre = restaurant.genre.split(',');\r\n        genres = [...genres, ...restaurant_genre];\r\n    });\r\n    genres = Array.from(new Set(genres.sort((a, b) => {\r\n        if (a < b) return -1;\r\n        if (a > b) return 1;\r\n        return 0;\r\n    })));\r\n\r\n    const StateSelect = <Select values={states} func={setStateFilter} resetPage={setCurrentPage} />\r\n    const GenreSelect = <Select values={genres} func={setGenreFilter} resetPage={setCurrentPage} />\r\n    const onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.currentTarget.value);\r\n        if (e.currentTarget.value === '') {\r\n            reset();\r\n        }\r\n    }\r\n    const onSearch = () => {\r\n        setRestaurants(restaurants.filter(restaurant => {\r\n            if (restaurant.genre.split(',').indexOf(searchValue) !== -1) return 1;\r\n            if (restaurant.name === searchValue || restaurant.city === searchValue) return 1;\r\n            return 0;\r\n        }));\r\n        setCurrentPage(0);\r\n    }\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter')\r\n            onSearch();\r\n    }\r\n    const onRestaurantClick = (restaurant: { name: string, city: string, hours: string, telephone: string, website: string, address1: string, attire: string }) => {\r\n        setRestaurantInfo(restaurant);\r\n        setShowInfo(true);\r\n    }\r\n    restaurantsInfo = restaurants.filter(restaurant => {\r\n        if (stateFilter === 'All') return 1;\r\n        return (restaurant.state === stateFilter) ? 1 : 0;\r\n    }).filter(restaurant => {\r\n        if (genreFilter === 'All') return 1;\r\n        return (restaurant.genre.split(',').find(genre => genre === genreFilter)) ? 1 : 0;\r\n    })\r\n\r\n    useEffect(() => {\r\n        setPages(Math.floor(restaurantsInfo.length / 10) + ((restaurantsInfo.length % 10 > 1) ? 1 : 0));\r\n    }, [pages, restaurantsInfo.length]);\r\n\r\n    return <div className=\"container-rs\">\r\n        <span>State </span>{StateSelect}\r\n        <span>Genre </span>{GenreSelect}\r\n        <span>Search </span>\r\n        <input type=\"search\" placeholder=\"Search by name, city, genre\" className=\"search-input\" onChange={onSearchChange} value={searchValue} onKeyPress={onKeyPress} />\r\n        <button onClick={onSearch}>Search</button>\r\n        {\r\n            (restaurantsInfo.length > 0) ?\r\n                <table className=\"table-restaurant border-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>City</th>\r\n                            <th>State</th>\r\n                            <th>Phone number</th>\r\n                            <th>Genres</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            restaurantsInfo.slice(currentPage, currentPage + 10).sort((a, b) => {\r\n                                if (a.name < b.name) { return -1; }\r\n                                if (a.name > b.name) { return 1; }\r\n                                return 0;\r\n                            }).map((restaurant, index) => (\r\n                                <tr key={restaurant.id} onClick={() => onRestaurantClick(restaurant)}>\r\n                                    <td className=\"text-center\">{index + 1}</td>\r\n                                    <td>{restaurant.name}</td>\r\n                                    <td>{restaurant.city}</td>\r\n                                    <td className=\"text-center\">{restaurant.state}</td>\r\n                                    <td className=\"text-center\">{restaurant.telephone}</td>\r\n                                    <td className=\"text-center\">{restaurant.genre}</td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                :\r\n                <div>\r\n                    {\r\n                        (stateFilter === 'All') ? <p>We currently don't have any restaurant information in this Genre or Search</p> : <p>We don't have any restaurant information in {stateFilter} {(genreFilter === 'All') ? '' : `or Genre - ${genreFilter}`}</p>\r\n                    }\r\n                </div>\r\n        }\r\n        <div className=\"pagination-container\">\r\n            {\r\n                Array(pages).fill(Number).map((_, i) => <div key={i} className=\"pagination-item\"><button onClick={() => setCurrentPage(i * 10)}>{i + 1}</button></div>)\r\n            }\r\n        </div>\r\n        <RestaurantMoreInfo showInfo={showInfo} setShowInfo={setShowInfo} restaurantInfo={restaurantInfo} />\r\n    </div>\r\n}\r\n\r\nexport default TableRestaurant;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TableRestaurant from './Table_Restaurant/main';\n\nfunction App() {\n  const [restaurants, setRestaurants] = useState([]);\n  const fetchCall = () => {\n    fetch(`https://code-challenge.spectrumtoolbox.com/api/restaurants`, {\n      headers: {\n        Authorization: `Api-Key q3MNxtfep8Gt`,\n      },\n    })\n      .then(res => res.json())\n      .then(res => setRestaurants(res))\n      .catch(err => alert(err));\n  }\n\n  const reset = () => {\n    fetchCall();\n  }\n\n  useEffect(() => {\n    fetchCall();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TableRestaurant restaurants={restaurants} setRestaurants={setRestaurants} reset={reset} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}